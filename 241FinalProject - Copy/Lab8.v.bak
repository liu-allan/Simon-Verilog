module top
	(
		CLOCK_50,						//	On Board 50 MHz
		KEY,// Your inputs and outputs here
		// On Board Keys
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,						//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   						//	VGA Blue[9:0]
	);

	input	CLOCK_50;	//	50 MHz
	input [0:0]KEY;
	// Declare your inputs and outputs here
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;				//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[7:0]	VGA_R;   				//	VGA Red[7:0] Changed from 10 to 8-bit DAC
	output	[7:0]	VGA_G;	 				//	VGA Green[7:0]
	output	[7:0]	VGA_B;   				//	VGA Blue[7:0]
	
	wire resetn;
	assign resetn = KEY[0];
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.
	wire ld_x, ld_y, ld_c, erase, countEnable;
	wire [7:0] outX;
	wire [6:0] outY;
	wire [2:0] outColour;
	wire writeEn;

	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(outColour),
			.x(outX),
			.y(outY),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "black.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn
	// for the VGA controller, in addition to any other functionality your design may require.
		
	
endmodule

module drawQuarters()
	
	reg [6:0]length;
	reg [6:0]width;
	
	always @(posedge CLOCK_50)
		begin
			if (Enable)
				length <= length + 1; 
			else if(length == 7'd80)
				length <= 0;
		end
		
	always @(posedge CLOCK_50)
		begin
			if (Enable)
				width <= width + 1; 
			else if(width == 7'd60)
				width <= 0;
		end
	
	always @(posedge CLOCK_50)
		begin
			if(resetn && Enable)
				begin
					outX <= X + length;
					outY <= Y + width;
					outColour <= colour;
				end
		end
		
endmodule


module datapath(Enable, xcoord, ycoord, incolour, CLOCK_50, outX, outY, outColour, resetn, ld_x, ld_y, ld_c, erase, countEnable);
	
	input resetn;
	input CLOCK_50;
	input Enable;
	input [7:0]xcoord;
	input [6:0]ycoord;
	input [2:0]incolour;
	input ld_x;
	input ld_y;
	input ld_c;
	input erase;
	input countEnable;
	output reg [7:0] outX;
	output reg [6:0] outY;
	output reg [2:0] outColour;

	reg [3:0] q; 
	reg [7:0] X;
	reg [6:0] Y;
	reg [2:0] colour;
	
	wire xdirection, ydirection;
	
	verticalDirection v(Y, ydirection, CLOCK_50);
	horizontalDirection h(X, xdirection, CLOCK_50);
	
	always @(posedge CLOCK_50)
		begin
			colour <= incolour;
			if(!resetn) 
				begin
					X <= 8'b0;
					Y <= 7'b0;
				end
			else
				if (ld_x)
					X <= xcoord;
				if (ld_y)
					Y <= ycoord;
				if (erase)
					colour <= 3'b000;
				if (countEnable)
					if(xdirection)
						X <= X + 1;
					else
						X <= X - 1;
					if(ydirection)
						Y <= Y + 1;
					else
						Y <= Y - 1;
		end
		
		
	always @(posedge CLOCK_50)
		begin
			if (Enable)
				q <= q + 1; 
			else
				q <= 0;
		end
		
	always @(posedge CLOCK_50)
		begin
			if(resetn && Enable)
				begin
					outX <= X + q[1:0];
					outY <= Y + q[3:2];
					outColour <= colour;
				end
		end	
	
		
endmodule
