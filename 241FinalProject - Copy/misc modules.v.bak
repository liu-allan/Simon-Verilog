module rateDivider(enable, CLOCK_50);
	output enable;
	input CLOCK_50;
	reg [25:0] q;
	
	always @(posedge CLOCK_50) 
	begin
		if (q == 26'd12499999/16) 
			q <= 0;
		else
			q <= q + 1; 
	end
	assign enable = (q == 26'b0)?1:0;

endmodule

module rate05hzDivider(enable, CLOCK_50);
	output enable;
	input CLOCK_50;
	reg [25:0] q;
	
	always @(posedge CLOCK_50) 
	begin
		if (q == 2*50000000-1) 
			q <= 0;
		else
			q <= q + 1; 
	end
	assign enable = (q == 26'b0)?1:0;

endmodule

module frameCounter(enable, CLOCK_50);
	output enable;
	input CLOCK_50;
	reg [3:0] q;
	
	always @(posedge CLOCK_50) 
	begin
		if (q == 4'b1111) 
			q <= 0;
		else
			q <= q + 1; 
	end
	assign enable = (q == 0)?1:0;

endmodule

module rate1hzDivider(enable, CLOCK_50);
	output enable;
	input CLOCK_50;
	reg [25:0] q;
	
	always @(posedge CLOCK_50) 
	begin
		if (q == 50000000-1) 
			q <= 0;
		else
			q <= q + 1; 
	end
	assign enable = (q == 26'b0)?1:0;

endmodule

module hexconverter(in, out);
	input [3:0]in;
	output [6:0]out;
	
	reg [6:0]out;
	always @(*)
	
	begin
		case(in[3:0])
		4'b0000: out = 7'b1000000;
		4'b0001: out = 7'b1111001;
		4'b0010: out = 7'b0100100;
		4'b0011: out = 7'b0110000;
		4'b0100: out = 7'b0011001;
		4'b0101: out = 7'b0010010;
		4'b0110: out = 7'b0000010;
		4'b0111: out = 7'b1111000;
		4'b1000: out = 7'b0000000;
		4'b1001: out = 7'b0010000;
		4'b1010: out = 7'b0001000;
		4'b1011: out = 7'b0000011;
		4'b1100: out = 7'b1000110;
		4'b1101: out = 7'b0100001;
		4'b1110: out = 7'b0000110;
		4'b1111: out = 7'b0001110;
		default: out = 7'b0000000;
		endcase
	end
	
endmodule


